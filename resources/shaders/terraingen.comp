#version 460 core
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Vert
{
    vec4 pos;
    vec4 normal;
    vec4 uv;
};

layout (std430, binding = 0) buffer vertexBuffer 
{
   Vert verts [];
};
uniform sampler2D terrainImage;
ivec2 mapSize = ivec2(0);

void main()
{
    int idx = int(gl_GlobalInvocationID.x);
    //calc normal


    float z0 = textureOffset(terrainImage, verts[idx].uv.xy, ivec2(-1,-1)).x;
    float z1 = textureOffset(terrainImage, verts[idx].uv.xy, ivec2(0,-1)).x;
    float z2 = textureOffset(terrainImage, verts[idx].uv.xy, ivec2(1,-1)).x;
    float z3 = textureOffset(terrainImage, verts[idx].uv.xy, ivec2(-1,0)).x;
    float z4 = textureOffset(terrainImage, verts[idx].uv.xy, ivec2(1,0)).x;
    float z5 = textureOffset(terrainImage, verts[idx].uv.xy, ivec2(-1,1)).x;
    float z6 = textureOffset(terrainImage, verts[idx].uv.xy, ivec2(0,1)).x;
    float z7 = textureOffset(terrainImage, verts[idx].uv.xy, ivec2(1,1)).x;
    verts[idx].normal.z = 1.;
    verts[idx].normal.x = -(z2 + 2*z4 + z7 - z0 - 2*z3 - z5);
    verts[idx].normal.y = -(z5 + 2*z6 + z7 -z0 - 2*z1 - z2);
    verts[idx].normal = normalize(verts[idx].normal);
    

    verts[idx].pos.z += texture(terrainImage, verts[idx].uv.xy).x;

}
