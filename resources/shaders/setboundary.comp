#version 460 core
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (binding = 0) writeonly restrict uniform image3D outVelocity;
layout (binding = 1) writeonly restrict uniform image3D outqc;
layout (binding = 2) writeonly restrict uniform image3D outqvAndTemp;

uniform sampler3D inVelocity; 
uniform sampler3D inqvAndTemp; 
uniform sampler3D inqc; 
uniform sampler3D incollision; 



#include "lib/rand.slib"
#include "lib/noise.slib"

uniform int side = 0;
uniform vec2 windValue = vec2(.05, .05);
uniform float baseTemperature = 200.;
uniform float bottomTemp = 10;
uniform float bottomQv = 20.;
uniform int size = 0;
uniform float noiseScale = 20.;
uniform float time = 0.;
void main()
{
    ivec3 ipos = ivec3(gl_GlobalInvocationID.xyz);//doing a load of wasted calcs becuase i am so done
    vec3 res = vec3(gl_WorkGroupSize*gl_NumWorkGroups);
    vec3 pos = (vec3(gl_GlobalInvocationID.xyz)+.5)/res;

    //sides
    //vertical velocity zero
    //user defined windValue
    //user defined temperature
    //qc zero
    //qv periodic boundaries, what does this mean? I think it just loop to the other side

    //top free slip
    //user defined temp
    //qc zero
    //qv zero

    //bottom
    //no slip
    //qv and temp user defined with randomness

    if(ipos.z == 0)//top
    {
        imageStore(outqc, ivec3(ipos), vec4(0));
        imageStore(outqvAndTemp, ivec3(ipos), vec4(0, baseTemperature, 0,0));
        imageStore(outVelocity, ivec3(ipos), vec4(texture(inVelocity, vec3(pos.xy, 0)).xy, 0, 0));
    }
    if(ipos.x == 0 || ipos.x == res.x-1 || ipos.y == 0 || ipos.y == res.y-1)//side
    {
        ivec3 apos = ipos;
        if(ipos.x == 0)
        {
            apos.x -=2;
        }
        if(ipos.x == int(res.x))
        {
            apos.x +=2;
        }
        if(ipos.y == 0)
        {
            apos.y -=2;
        }
        if(ipos.y == int(res.y))
        {
            apos.y +=2;
        }
        apos=apos%ivec3(res);
        vec4 otherqvAndTemp = texture(inqvAndTemp, vec3(apos)/res);
        imageStore(outVelocity, ipos, vec4(windValue, 0, 0));
        imageStore(outqvAndTemp, ipos, vec4(otherqvAndTemp.x, baseTemperature,0,0));
    }
    vec4 col = texture(incollision, pos);
    if(col.w>0)//collision 
    {
        imageStore(outqc, ipos, vec4(0));
        imageStore(outVelocity, ipos, vec4(0,0,0, 0));
        imageStore(outqvAndTemp, ipos, vec4(0, 0,0,0));
    }
    float col1 = textureOffset(incollision, pos, ivec3(0,0,-1)).w;
    col1 += textureOffset(incollision, pos, ivec3(0,0,1)).w;
    col1 += textureOffset(incollision, pos, ivec3(0,1,0)).w;
    col1 += textureOffset(incollision, pos, ivec3(0,-1,0)).w;
    col1 += textureOffset(incollision, pos, ivec3(1,0,0)).w;
    col1 += textureOffset(incollision, pos, ivec3(-1,0,0)).w;
    if(col1 > 0.)//adjacent to collision
    {
        vec3 vel = texture(inVelocity, pos).xyz;
        imageStore(outVelocity, ipos, vec4(vel-dot(vel,col.xyz)*col.xyz, 0));

        imageStore(outqvAndTemp, ipos, vec4(bottomQv*noise3D(pos*noiseScale+time)*(1.-pos.z), baseTemperature+((bottomTemp*noise3D(pos*noiseScale+time+4124.151)/2.)+bottomTemp/2.)*(1.-pos.z),0,0));
        
    }
    
}