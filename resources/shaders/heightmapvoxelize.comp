#version 460 core
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (binding = 1, r8) uniform image3D result;
uniform sampler2D heightMap;
uniform vec3 bboxMin;
uniform vec3 bboxMax;

void main()
{
    vec4 data = vec4(0);
    vec3 res = vec3(gl_WorkGroupSize*gl_NumWorkGroups);
    vec3 pos = vec3(gl_GlobalInvocationID.xyz);//TODO proper support for differently sized terrains
    pos.z = (1.-pos.z/float(res.z))*(bboxMax.z-bboxMin.z)+bboxMin.z;
    pos.xy = fract(-pos.xy/res.xy);
    float z0 = textureOffset(heightMap, pos.xy, ivec2(-1,-1)).x;
    float z1 = textureOffset(heightMap, pos.xy, ivec2(0,-1)).x;
    float z2 = textureOffset(heightMap, pos.xy, ivec2(1,-1)).x;
    float z3 = textureOffset(heightMap, pos.xy, ivec2(-1,0)).x;
    float z4 = textureOffset(heightMap, pos.xy, ivec2(1,0)).x;
    float z5 = textureOffset(heightMap, pos.xy, ivec2(-1,1)).x;
    float z6 = textureOffset(heightMap, pos.xy, ivec2(0,1)).x;
    float z7 = textureOffset(heightMap, pos.xy, ivec2(1,1)).x;
    data.z = 1.;
    data.x = -(z2 + 2*z4 + z7 - z0 - 2*z3 - z5);
    data.y = -(z5 + 2*z6 + z7 -z0 - 2*z1 - z2);
    data.xyz = normalize(data.xyz);
    if(texture(heightMap, pos.xy).x > (pos.z))
    {
        data.w = 1;
    }
    imageStore(result, ivec3(gl_GlobalInvocationID.xyz), vec4(data));
}
