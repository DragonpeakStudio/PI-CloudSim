#version 460 core
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (binding = 0) writeonly restrict uniform image3D outVelField;

uniform sampler3D inVelField;
uniform sampler3D inqc;
uniform sampler3D inqvAndTemp;
uniform sampler3D incurl;
uniform float vortStr = 0.;

uniform float delta;
uniform float baseTemperature = 200.;
uniform float buoyStr = 1.;

const float GRAVITY = 9.81;
float gradient(vec3 pos, ivec3 offset)
{
    float gr = length(abs(textureOffset(incurl, pos, offset).xyz))-length(abs(textureOffset(incurl, pos, -offset).xyz));
    if(isnan(gr))
    {
        return 0.;
    }
    return gr;
}
vec3 vorticityConfinement(vec3 pos)
{
    vec3 grad = vec3(0);
    grad.x = gradient(pos, ivec3(1,0,0));
    grad.y = gradient(pos, ivec3(0,1,0));
    grad.z = gradient(pos, ivec3(0,0,1));
    grad = normalize(grad);
    if(isnan(grad.x) || isnan(grad.y) || isnan(grad.z))return vec3(0);
    vec3 vort = texture(incurl, pos).xyz;
    return cross(grad, vort);
}

float calcBuoyancy(float qc, float qv, float temp)
{

    float tv = temp*(1+0.61*qv);
    return GRAVITY*((tv/baseTemperature)-(qc));
}

void main()
{
    vec3 res = vec3(gl_WorkGroupSize*gl_NumWorkGroups);
    vec3 pos = (vec3(gl_GlobalInvocationID.xyz)+.5)/res;

    vec4 qc = texture(inqc, pos);
    vec4 qvAndTemp = texture(inqvAndTemp, pos);

    vec3 newForces = vec3(0);
    newForces -= (delta*vec3(0,0,1)*calcBuoyancy(qc.x, qvAndTemp.x, qvAndTemp.y)*buoyStr)/128;
    newForces += delta*((vorticityConfinement(pos))*vortStr);


    imageStore(outVelField, ivec3(gl_GlobalInvocationID.xyz), texture(inVelField, pos)+vec4(newForces,0)*delta);

}