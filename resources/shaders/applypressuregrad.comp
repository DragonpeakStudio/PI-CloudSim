#version 460 core
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (binding = 0) writeonly restrict uniform image3D outVelocity;

uniform sampler3D inVelocity;
uniform sampler3D inPressureAndDivergence;
uniform sampler3D inCollision;

float getSample(vec3 pos, float current)
{
    if(texture(inCollision, pos).w > 0.)
    {
        return current;
    }
    return texture(inPressureAndDivergence, pos).x;
}
void main()
{
    vec3 res = vec3(gl_WorkGroupSize*gl_NumWorkGroups);
    vec3 pos = (vec3(gl_GlobalInvocationID.xyz)+.5)/res;
    vec2 current = texture(inPressureAndDivergence, pos).xy;
    if(texture(inCollision, pos).w > 0.)
    {
        return;
    }
    float xDif = (getSample(vec3(gl_GlobalInvocationID.xyz+vec3(1,0, 0)+.5)/res, current.x)-getSample(vec3(gl_GlobalInvocationID.xyz+vec3(-1,0, 0)+.5)/res, current.x))/2.;
    float yDif = (getSample(vec3(gl_GlobalInvocationID.xyz+vec3(0,1, 0)+.5)/res, current.x)-getSample(vec3(gl_GlobalInvocationID.xyz+vec3(0,-1, 0)+.5)/res, current.x))/2.;
    float zDif = (getSample(vec3(gl_GlobalInvocationID.xyz+vec3(0,0, 1)+.5)/res, current.x)-getSample(vec3(gl_GlobalInvocationID.xyz+vec3(0,0, -1)+.5)/res, current.x))/2.;

    imageStore(outVelocity, ivec3(gl_GlobalInvocationID.xyz), vec4(vec3(texture(inVelocity, pos).xyz+vec3(xDif,yDif,zDif)),1));

}